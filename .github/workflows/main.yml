# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  set_version: 
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - uses: actions/checkout@v2
    - name: Git Version
      id: version
      uses: codacy/git-version@2.4.0
#   with:
#     # The name of the release branch
#     release-branch: # default is master
#     # The name of the dev branch
#     dev-branch: # default is dev
#     # The prefix to use in the version
#     prefix: # optional
#     # The paths to be used to calculate changes (comma-separated)
#     log-paths: # optional, default is ./
  # This workflow contains a single job called "build"
  build:
    needs: set_version
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      VERSION: ${{needs.set_version.outputs.version}}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Checks-out pipeline templates
      - name: Checkout_Templates
        uses: actions/checkout@v2.3.4
        with:
          repository: alexl2012/pipeline-templates
          path: templates
          token: ${{ secrets.REPO_TOKEN }}
          persist-credentials: true

      # Runs a set of commands using the runners shell
      - name: List Templates
        run: |
          cd templates
          ls -R
      - name: List Files
        run: |
          ls
      - name: Build Docker
        run: |
            templates/build/steps/build-docker.sh -a $APP_NAME -v $VERSION -r $REPO_NAME -df $DOCKER_FILE -dc $DOCKER_CONTEXT
        env:
          APP_NAME: node-docker
          REPO_NAME: testacr
          DOCKER_FILE: Dockerfile
          DOCKER_CONTEXT: ./
