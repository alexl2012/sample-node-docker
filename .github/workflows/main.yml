# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  set_version: 
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: kubeconfig
      run: |
        echo $KUBECONFIG
    - uses: azure/k8s-set-context@v1
      with:
        method: service-account
        k8s-url: demo-mfe-dns-c477ae09.hcp.northeurope.azmk8s.io
        k8s-secret:  ${{ secrets.DEV_KUBE }}
      id: setcontext
    - uses: actions/checkout@v2
    - name: Git Version
      id: version
      uses: codacy/git-version@2.4.0
#   with:
#     # The name of the release branch
#     release-branch: # default is master
#     # The name of the dev branch
#     dev-branch: # default is dev
#     # The prefix to use in the version
#     prefix: # optional
#     # The paths to be used to calculate changes (comma-separated)
#     log-paths: # optional, default is ./
  build_helm:
    needs: set_version
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      VERSION: ${{needs.set_version.outputs.version}}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Helm tool installer
        uses: Azure/setup-helm@v1
        
      - name: Azure Container Registry Login
        uses: Azure/docker-login@v1
        with:
          login-server: demomfedev.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - name: Package Helm Charts
        run: |
          export HELM_EXPERIMENTAL_OCI=1
          helm chart save $CHARTS_DIR $REGISTRY/helm/$APP_NAME:$VERSION
          echo $ACR_PASSWORD | helm registry login $REGISTRY \
           --username $ACR_USERNAME \
            --password-stdin
          helm chart push $REGISTRY/helm/$APP_NAME:$VERSION
        env: 
          ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
          APP_NAME: node-docker
          CHARTS_DIR: ./charts
          REGISTRY: demomfedev.azurecr.io
        
        
  # This workflow contains a single job called "build"
  build:
    needs: set_version
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      VERSION: ${{needs.set_version.outputs.version}}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Azure Container Registry Login
        uses: Azure/docker-login@v1
        with:
          login-server: demomfedev.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          
      - name: Prepare
        id: prep
        run: |
          IMAGE="demomfedev.azurecr.io/${APP_NAME}"
          echo ::set-output name=tagged_image::${IMAGE}:${VERSION}
          echo ::set-output name=tag::${TAG}
        env:
          APP_NAME: node-docker
          REPO_NAME: testacr
          
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: src
          push: true
          tags: ${{ steps.prep.outputs.tagged_image }}
          file: Dockerfile

  deploy-ppe: 
    runs-on: ubuntu-latest
    needs: ["build", "build_helm"]
    strategy:
      matrix:
       include:
         - environment: "ppe1"
         - environment: "ppe2"

    steps:
      - name: kubeconfig
        run: |
          echo $KUBECONFIG
      - uses: azure/k8s-set-context@v1
        with:
          method: service-account
          k8s-url: demo-mfe-dns-c477ae09.hcp.northeurope.azmk8s.io
          k8s-secret:  ${{ secrets.DEV_K8S }}
        id: setcontext
        
      - name: helm-deploy
        run: |
          echo $ENVIRONMENT
          #deploy-helm.sh
        env:
          ENVIRONMENT: ${{ matrix.environment }}
          
  deploy-production: 
    runs-on: ubuntu-latest
    needs: ["deploy-ppe"]
    strategy:
      matrix:
       include:
         - environment: "prod1"
           region-name: "uksouth"
         - environment: "prod2"
           region-name: "northeurope"

    steps:
      - uses: azure/k8s-set-context@v1
        with:
          method: service-account
          k8s-url: demo-mfe-dns-c477ae09.hcp.northeurope.azmk8s.io
          k8s-secret:  ${{ secrets.DEV_K8S }}
        id: setcontext

      - name: helm-deploy
        run: |
          echo $ENVIRONMENT $REGION
          #deploy-helm.sh
        env:
          ENVIRONMENT: ${{ matrix.environment }}
          REGION: ${{ matrix.region-name }}
        
        
        
      
#       # Checks-out pipeline templates
#       - name: Checkout_Templates
#         uses: actions/checkout@v2.3.4
#         with:
#           repository: alexl2012/pipeline-templates
#           path: templates
#           token: ${{ secrets.REPO_TOKEN }}
#           persist-credentials: true

#       # Runs a set of commands using the runners shell
#       - name: List Templates
#         working-directory: templates
#         run: |
#           ls -R
#           docker context ls
          
#       - name: List Files
#         working-directory: source
#         run: |
#           ls

#       - name: Set up Docker Buildx
#         id: buildx
#         uses: docker/setup-buildx-action@v2.6.1
#         # Only worked for us with this option on ü§∑‚Äç‚ôÇÔ∏è
#         with:
#           install: true

#       - name: Cache Docker layers
#         uses: actions/cache@v2
#         with:
#           path: /tmp/.buildx-cache
#           # Key is named differently to avoid collision
#           key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
#           restore-keys: |
#             ${{ runner.os }}-multi-buildx

#       - name: Build production image
#         uses: docker/build-push-action@v2
#         with:
#           context: .
#           builder: ${{ steps.buildx.outputs.name }}
#           file: Dockerfile
#           # Set the desired build target here
#           target: deploy
#           push: false
#           tags: ${{ steps.prep.outputs.tagged_image }}
#           cache-from: type=local,src=/tmp/.buildx-cache
#           # Note the mode=max here
#           # More: https://github.com/moby/buildkit#--export-cache-options
#           # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
#           cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

#       - name: Move cache
#         run: |
#           rm -rf /tmp/.buildx-cache
#           mv /tmp/.buildx-cache-new /tmp/.buildx-cache
#       - name: Build Docker
#         shell: bash
#         working-directory: source
#         run: |
#             ../templates/build/steps/build-docker.sh -a $APP_NAME -v $VERSION -r $REPO_NAME -df $DOCKER_FILE -dc $DOCKER_CONTEXT
#         env:
#           APP_NAME: node-docker
#           REPO_NAME: testacr
#           DOCKER_FILE: Dockerfile
#           DOCKER_CONTEXT: .
